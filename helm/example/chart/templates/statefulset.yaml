apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "edb.name" . }}
  labels:
    db: {{ template "edb.name" . }}
    {{- with .Values.k8s.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  annotations:
    {{- if .Values.commonAnnotations }}
    {{- include "edb.tplValue" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
    {{- with .Values.k8s.annotations }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ template "edb.name" . }}
  replicas: {{ template "edb.replicas" . }}
  selector:
    matchLabels:
      db: {{ template "edb.name" . }}
      cluster: {{ template "edb.name" . }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        db: {{ template "edb.name" . }}
        cluster: {{ template "edb.name" . }}
        {{- with .Values.k8s.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- with .Values.k8s.podAnnotations }}
      annotations: {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.k8s.schedulerName }}
      schedulerName: "{{ .Values.k8s.schedulerName }}"
      {{- end }}
      {{- if .Values.k8s.nodeSelector }}
      nodeSelector: {{- toYaml .Values.k8s.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.k8s.affinity }}
      affinity: {{- toYaml .Values.k8s.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.k8s.tolerations }}
      tolerations: {{- toYaml .Values.k8s.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.k8s.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.k8s.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- end }}
      {{- if .Values.k8s.priorityClassName }}
      priorityClassName: {{ .Values.k8s.priorityClassName }}
      {{- end }}
      containers:
      - name: {{ template "edb.name" . }}
        env:
        - name: DATABASE_NAME
          value: {{  default "edb" .Values.dbname | quote }}
        {{- if default 0 .Values.replication.standbys }}
        - name: REPL_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "edb.name" . }}
              key: repluser
        - name: REPL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "edb.name" . }}
              key: replpassword
        {{- end }}
        - name: ENTERPRISEDB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "edb.name" . }}
              key: supassword
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: {{ template "edb.name" . }}
              key: dbuser
        - name: DATABASE_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "edb.name" . }}
              key: dbpassword
        - name: PGPORT
          value: {{ default 5444 .Values.pgconfig.port | quote }}
        - name: AUTH
          value: {{ default "md5" .Values.pgconfig.auth | quote }}
        - name: LOCALEPARAMETER
          value: {{ default "en_US.UTF-8" .Values.config.locale | quote }}
        {{- if default 0 .Values.replication.standbys }}
        - name: NAMESERVER
          value: {{ default "8.8.8.8" .Values.config.pingserver | quote }}
        - name: ENABLE_HA_MODE
          value: "Yes"
        {{- else }}
        - name: ENABLE_HA_MODE
          value: "No"
        {{- end }}
        - name: ENABLE_ARCHIVE_MODE
          value: "No"
        - name: ENABLE_MONITOR_MODE
          value: "No"
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NODE
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: INITDBOPTS
          value: {{ .Values.config.initdbOpts | quote }}
        - name: REUSE_DATA_VOLUME
          value: {{ default "Yes" .Values.config.reuseDataVolume | quote }}
        - name: MIGRATE_PGVERSION
          value: {{ default "No" .Values.config.upgradeMode | quote }}
        - name: DEBUG_MODE
          value: {{ default "No" .Values.config.debug | quote }}
        - name: ACCEPT_EULA
          value: {{ default "No" .Values.acceptEULA | quote }}
        image: {{ .Values.repo.registry }}/{{ .Values.repo.name }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        {{- if .Values.resources }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
            - /var/lib/edb/testIsReady.sh
          initialDelaySeconds: {{  default 120 .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{  default 10 .Values.readinessProbe.timeoutSeconds }}
          periodSeconds: {{  default 10 .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{  default 3 .Values.readinessProbe.failureThreshold }}
          successThreshold: {{  default 1 .Values.readinessProbe.successThreshold }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - /var/lib/edb/testIsHealthy.sh
          initialDelaySeconds: {{  default 600 .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{  default 300 .Values.livenessProbe.timeoutSeconds }}
          periodSeconds: {{  default 60 .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{  default 3 .Values.livenessProbe.failureThreshold }}
          successThreshold: {{  default 1 .Values.livenessProbe.successThreshold }}
        {{- end }}
        ports:
        - containerPort: {{ .Values.pgconfig.port }}
        volumeMounts:
        - name: edb-data
          mountPath: /edbvolume
        {{- if .Values.config.customConfigmap }}
        - name: customConfig
          mountPath: /initconf
        {{- end }}
        {{- if .Values.k8s.extraVolumeMounts }}
        {{- toYaml .Values.k8s.extraVolumeMounts | nindent 8 }}
        {{- end }}
      {{- if .Values.repo.password }}
      imagePullSecrets:
      - name: {{ template "edb.name" . }}-pullsecret
      {{- end }}
      dnsPolicy: {{ default "ClusterFirst" .Values.k8s.dnsPolicy | quote }}
      restartPolicy: {{ default "Always" .Values.k8s.restartPolicy | quote }}
      volumes:
      {{- if .Values.config.customConfigmap }}
      - name: customConfig
        configMap:
          name: {{ .Values.config.customConfigmap }}
      {{- end }}
      {{- if .Values.k8s.extraVolumes }}
      {{- toYaml .Values.k8s.extraVolumes | nindent 6 }}
      {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: edb-data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "edb.storageClass" . }}
  {{- else }}
      - name: edb-data
        emptyDir: {}
  {{- end }}
