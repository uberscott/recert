# this is the name of the statefulset and service. It defaults to image
name: edb-as

# Please read and acept the EnterpriseDB EULA
# https://www.enterprisedb.com/ba/license-support-services-v3-18
acceptEULA: "No"

# This chapter requires configuring a username and password for pulling our images
repo:
  name: enterprisedb
  registry: registry.connect.redhat.com
  username:
  # Leave repo.password empty to disable creating and using the pullsecret
  password:

image:
  # name of the image to be used for running postgres
  name: edb-epas-lite11
  # version postgres
  tag: latest
  # pull again on every reschedule
  pullPolicy: Always

users:
  # This is the password for the superuser (enterprisedb, or postgres)
  suPassword: postgres
  # The name of the owner of the database. Leave empty for using .Values.dbname
  dbUser:
  # The password of the owner of the database. Leave empty for using .Values.dbname
  dbPassword:

# This is the name of the user database to be created at init time
dbname: edb

config:
  # Set to name of configmap for using custom config
  customConfigmap: ""
  # extra options for initdb
  initdbOpts: "--data-checksums"
  # Default language and encoding
  locale: en_US.UTF-8
  # This is used by EFM as a pingserver
  pingserver: 8.8.8.8
  # Setting to No will clean the daradirectory on every reschedule.
  # This requires extra time during reschedule, but also allows to reinit an
  # empty cluster, and fixes standby's that have fallen behind.
  reuseDataVolume: "No"
  # Setting this value to "Yes" will load the data dump after upgrading to a newer version
  upgradeMode: "No"
  # In debugmode all containers run, but Postgres is not started.
  # This allows for debugging purposes.
  # debug: "Yes"
  debug: "No"

pgconfig:
  # the port where Postgres will run on. This will also be the port for the services.
  port: 5444
  # the authentication to be used. Use md5 for 9.d!!!
  auth: scram-sha-256

# Configuration for the probe used by K8s to check if the container is in a ready state.
readinessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 30
  successThreshold: 1

# Configuration for the probe used by K8s to check if the container is still alive.
livenessProbe:
  enabled: true
  failureThreshold: 3
  initialDelaySeconds: 60
  periodSeconds: 10
  timeoutSeconds: 30
  successThreshold: 1

# All configuration on persistent storage (for Database data)
persistence:
  # changing this to false will use emptydir for database storage
  enabled: true
  # Type of storage that the storage class should provide
  accessModes:
  - ReadWriteOnce
  # Annotations to be specified with the persistent volume claims
  annotations: {}
  # SIze of the storage to be used for Postgres data
  size: 2Gi
  ####
  storageClass: "standard"

# See https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#requests-and-limits for more info.
# Note that this deployment will consume .Values.replication.standbys * .Values.resources.limits.cpu EDB subscriptions
resources:
  limits:
    cpu: 1000m
    memory: 1000Mi
  requests:
    cpu: 500m
    memory: 500Mi

service:
  # Expose the master through a service. Set to "" to disable the master service.
  masterType: LoadBalancer
  # Expose the standby through a service. Set to "" to disable the standby service.
  standbyType: ClusterIP
  # You can set annotations on the services
  annotations: {}

replication:
  user: repl_user
  password: repl_password
  standbys: 0

###
extraEnv: []
## updateStrategy for PostgreSQL StatefulSet and its slaves StatefulSets
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
updateStrategy:
  type: RollingUpdate

k8s:
  # To configure your own affinity. Be aware that antiAffinity rules will overwrite the default.
  affinity: {}
  # To configure node affinity.
  nodeSelector: {}
  # To configure tolerations (node antiAffinity).
  tolerations: []
  # To set sepcific labels
  labels: {}
  # To configure annotations on the statefulset
  annotations: {}
  # To configure extra labels on the pods of the statefulset
  podLabels: {}
  # To configure annotations on the pods of the statefulset
  podAnnotations: {}
  # To count these pods to a specific priority class
  priorityClassName: ""
  # To mount extra volumes
  extraVolumeMounts: []
  # To define extra volumes
  extraVolumes: []
  schedulerName:
  dnsPolicy:
  restartPolicy:
  terminationGracePeriodSeconds:

commonAnnotations: {}
securityContext:
  enabled: true
  fsGroup: 1000
  runAsUser: 1000
